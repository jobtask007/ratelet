// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Exchange provides a mock function for the type MockService
func (_mock *MockService) Exchange(from string, to string, amount float64) (string, error) {
	ret := _mock.Called(from, to, amount)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, float64) (string, error)); ok {
		return returnFunc(from, to, amount)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, float64) string); ok {
		r0 = returnFunc(from, to, amount)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = returnFunc(from, to, amount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type MockService_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - from
//   - to
//   - amount
func (_e *MockService_Expecter) Exchange(from interface{}, to interface{}, amount interface{}) *MockService_Exchange_Call {
	return &MockService_Exchange_Call{Call: _e.mock.On("Exchange", from, to, amount)}
}

func (_c *MockService_Exchange_Call) Run(run func(from string, to string, amount float64)) *MockService_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *MockService_Exchange_Call) Return(s string, err error) *MockService_Exchange_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockService_Exchange_Call) RunAndReturn(run func(from string, to string, amount float64) (string, error)) *MockService_Exchange_Call {
	_c.Call.Return(run)
	return _c
}
