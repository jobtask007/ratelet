// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"ratelet/internal/exchange/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// GetCryptoRate provides a mock function for the type MockRepository
func (_mock *MockRepository) GetCryptoRate(symbol string) (domain.CryptoCurrencyRate, error) {
	ret := _mock.Called(symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetCryptoRate")
	}

	var r0 domain.CryptoCurrencyRate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.CryptoCurrencyRate, error)); ok {
		return returnFunc(symbol)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.CryptoCurrencyRate); ok {
		r0 = returnFunc(symbol)
	} else {
		r0 = ret.Get(0).(domain.CryptoCurrencyRate)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(symbol)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetCryptoRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCryptoRate'
type MockRepository_GetCryptoRate_Call struct {
	*mock.Call
}

// GetCryptoRate is a helper method to define mock.On call
//   - symbol
func (_e *MockRepository_Expecter) GetCryptoRate(symbol interface{}) *MockRepository_GetCryptoRate_Call {
	return &MockRepository_GetCryptoRate_Call{Call: _e.mock.On("GetCryptoRate", symbol)}
}

func (_c *MockRepository_GetCryptoRate_Call) Run(run func(symbol string)) *MockRepository_GetCryptoRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_GetCryptoRate_Call) Return(cryptoCurrencyRate domain.CryptoCurrencyRate, err error) *MockRepository_GetCryptoRate_Call {
	_c.Call.Return(cryptoCurrencyRate, err)
	return _c
}

func (_c *MockRepository_GetCryptoRate_Call) RunAndReturn(run func(symbol string) (domain.CryptoCurrencyRate, error)) *MockRepository_GetCryptoRate_Call {
	_c.Call.Return(run)
	return _c
}
